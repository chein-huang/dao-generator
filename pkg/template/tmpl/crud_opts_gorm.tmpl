
package dao

import (
	"time"

	"gorm.io/gorm"

	"gitlab.bj.sensetime.com/elementary/graviton/graviton-data-compliance-service/pkg/model"
)

type {{ .StructNameSmallCamel }}Queries struct{}

// {{ .StructName }}Qs 这种方式避免其他开发者用错option
var {{ .StructName }}Qs {{ .StructNameSmallCamel }}Queries

{{- range .Fields }}
func (*{{ $.StructNameSmallCamel }}Queries) With{{ .Name }}(v {{ .Type }}) DaoOpt {
	return daoOpt(func(opt *daoOptions) {
		queryParams := newQueryParams("{{ .NameSnake }} = ?", v)
		opt.tx = queryParams.where(opt.tx)
		opt.queryParams = append(opt.queryParams, queryParams)
	})
}

func (*{{ $.StructNameSmallCamel }}Queries) WithIn{{ .Name }}(vs []{{ .Type }}) DaoOpt {
	return daoOpt(func(opt *daoOptions) {
        queryParams := newQueryParams("{{ .NameSnake }} in (?)", vs)
		opt.tx = queryParams.where(opt.tx)
		opt.queryParams = append(opt.queryParams, queryParams)
	})
}

{{- if .Order }}
func (*{{ $.StructNameSmallCamel }}Queries) WithOrderBy{{ .Name }}(desc bool) DaoOpt {
	return daoOpt(func(opt *daoOptions) {
		orderStr := "{{ .NameSnake }}"
		if desc {
			orderStr += " DESC"
		}
		opt.tx = opt.tx.Order(orderStr)
	})
}
{{ end }}
{{ if .Range }}
func (*{{ $.StructNameSmallCamel }}Queries) With{{ .Name }}Lt(v {{ .Type }}) DaoOpt {
	return daoOpt(func(opt *daoOptions) {
        queryParams := newQueryParams("{{ .NameSnake }} < ?", v)
        opt.tx = queryParams.where(opt.tx)
        opt.queryParams = append(opt.queryParams, queryParams)
    })
}

func (*{{ $.StructNameSmallCamel }}Queries) With{{ .Name }}Lte(v {{ .Type }}) DaoOpt {
	return daoOpt(func(opt *daoOptions) {
        queryParams := newQueryParams("{{ .NameSnake }} <= ?", v)
        opt.tx = queryParams.where(opt.tx)
        opt.queryParams = append(opt.queryParams, queryParams)
    })
}

func (*{{ $.StructNameSmallCamel }}Queries) With{{ .Name }}Gt(v {{ .Type }}) DaoOpt {
	return daoOpt(func(opt *daoOptions) {
        queryParams := newQueryParams("{{ .NameSnake }} > ?", v)
        opt.tx = queryParams.where(opt.tx)
        opt.queryParams = append(opt.queryParams, queryParams)
    })
}

func (*{{ $.StructNameSmallCamel }}Queries) With{{ .Name }}Gte(v {{ .Type }}) DaoOpt {
	return daoOpt(func(opt *daoOptions) {
        queryParams := newQueryParams("{{ .NameSnake }} >= ?", v)
        opt.tx = queryParams.where(opt.tx)
        opt.queryParams = append(opt.queryParams, queryParams)
    })
}

{{- end }}
{{- end }}
{{- range .Preloads }}
func (*{{ $.StructNameSmallCamel }}Queries) WithPreload{{ .Name }}() DaoOpt {
	return daoOpt(func(opt *daoOptions) {
        {{- if .OrderBy }}
		opt.tx = opt.tx.Preload("{{ .Name }}", func(db *gorm.DB) *gorm.DB {
			return db.Order("{{ .OrderBy }}")
		})
        {{- else }}
        opt.tx = opt.tx.Preload("{{ .Name }}")
        {{- end }}
	})
}

{{- end }}
// WARNING: 不建议用这个方式，需要确保期望查询的字段的值不为零值
func (*{{ .StructNameSmallCamel }}Queries) WithModel(v *{{ .ModelPackage }}.{{ .StructName }}) DaoOpt {
	return daoOpt(func(opt *daoOptions) {
		opt.tx = opt.tx.Where(v)
		// 这里只是记录
		queryParams := newQueryParams("model", v)
		opt.queryParams = append(opt.queryParams, queryParams)
	})
}

type {{ .StructNameSmallCamel }}Updates struct{}

// {{ .StructName }}Updates 这种方式避免其他开发者用错option
var {{ .StructName }}Updates {{ .StructNameSmallCamel }}Updates

{{- range .Fields }}
func (*{{ $.StructNameSmallCamel }}Updates) WithUpdateState(v {{ .Type }}) DaoOpt {
	return daoOpt(func(opt *daoOptions) {
		opt.setUpdateMap("{{ .NameSnake }}", v)
	})
}

{{- end }}
